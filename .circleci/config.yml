# Scala CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/sample-config/ for more details
#
version: 2.1

env: &env
  TERM: dumb
  CI: "true"
  USER: circleci
  CLOUDSDK_CONFIG: "/tmp/gcp.conf"

commands:
  setup_nix:
    description: Set up Nix
    steps:
    - run:
        name: make_cache_key
        command: |
          set -euo pipefail

          git log -n1 --format=%H nix shell.nix > /tmp/nix-cache-key
          sudo mkdir /nix
          sudo chown $USER /nix
    - restore_cache:
        keys:
        - nix-{{ checksum "/tmp/nix-cache-key" }}
    - run:
       name: setup_nix
       command: |
         set -euo pipefail

         if [ -f ~/.config/nix/nix.conf ]; then
             exit 0
         fi

         # Disabling sandbox because:
         # 1. It doesn't work on CircleCI (sethostname is not allowed)
         # 2. We don't plan to build anything, so the risk is fairly low
         mkdir -p ~/.config/nix
         echo 'sandbox = false' >> ~/.config/nix/nix.conf

         sh <(curl -fsSL https://nixos.org/nix/install) --no-daemon
         . /home/circleci/.nix-profile/etc/profile.d/nix.sh
         nix-shell shell.nix --run 'echo "Done loading all packages."'
    - save_cache:
        key: nix-{{ checksum "/tmp/nix-cache-key" }}
        paths:
        - /nix
        - /home/circleci/.nix-profile
        - /home/circleci/.nix-channels
        - /home/circleci/.nix-defexpr
        - /home/circleci/.config/nix
  gcp_login:
    description: Log in with GCP
    steps:
    - run:
        name: gcp_login
        command: |
          set -euo pipefail
          rm -rf $CLOUDSDK_CONFIG
          mkdir -p $CLOUDSDK_CONFIG
          key=$(mktemp)
          trap "rm -f $key" EXIT
          echo "$GCP_SERVICE_ACCOUNT_KEY" | base64 -d > $key
          . /home/circleci/.nix-profile/etc/profile.d/nix.sh
          nix-shell shell.nix \
            --pure \
            --keep CLOUDSDK_CONFIG \
            --run "gcloud auth activate-service-account --key-file=\"$key\""

jobs:
  build:
    docker:
    - image: cimg/base:2021.04
    environment:
      <<: *env
    steps:
      - checkout
      - setup_nix
      - run:
          name: build
          command: |
            set -euo pipefail
            . /home/circleci/.nix-profile/etc/profile.d/nix.sh

            nix-shell shell.nix \
              --pure \
              --run './build.sh'
  release:
    docker:
    - image: cimg/base:2021.04
    environment:
      <<: *env
    steps:
      - checkout
      - setup_nix
      - gcp_login
      - run:
          name: release
          command: |
            set -euo pipefail
            . /home/circleci/.nix-profile/etc/profile.d/nix.sh

            export PGP_PASSPHRASE=""
            export PGP_SECRET="$gpg_code_signing"
            export SONATYPE_PASSWORD="$MAVEN_PASSWORD"
            export SONATYPE_USERNAME="$MAVEN_USERNAME"
            export CI_COMMIT_TAG=1

            nix-shell shell.nix \
              --keep PGP_PASSPHRASE \
              --keep PGP_SECRET \
              --keep SONATYPE_PASSWORD \
              --keep SONATYPE_USERNAME \
              --keep CI_COMMIT_TAG \
              --keep CLOUDSDK_CONFIG \
              --keep CI \
              --pure \
              --run bash \<<'EOF'
              set -euo pipefail
              trap "rm -rf $CLOUDSDK_CONFIG" EXIT

              ./release.sh

            EOF

workflows:
  version: 2
  build:
    jobs:
    - build
    - release:
        requires:
        - build
        context:
        # Despite the name, that's where the Sonatype credentials are.
        - npn-publish
        filters:
          branches:
            only: main
